{"version":3,"sources":["App.js","components/Keypad.js","components/ResultDisplay.js","serviceWorker.js","index.js"],"names":["App","props","state","input","output","keypadArray","tempInput","tempOutput","type","value","String","this","charAt","setState","calculate","eval","indexOf","toFixed","className","style","border","margin","padding","display","displayInput","displayOutput","keypadarray","calciClick","keypadCallback","bind","Component","Keypad","console","log","map","elem1","index1","key","elem2","index2","onClick","onclick","ResultDisplay","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce2380ec.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Keypad from './components/Keypad';\r\nimport ResultDisplay from './components/ResultDisplay';\r\nimport './App.css'\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: '0',\r\n      output: '',\r\n      keypadArray: [\r\n        [{ 'type': 'number', 'value': 7 }, { 'type': 'number', 'value': 8 }, { 'type': 'number', 'value': 9 }, { 'type': 'action', 'value': 'CE' }],\r\n        [{ 'type': 'number', 'value': 4 }, { 'type': 'number', 'value': 5 }, { 'type': 'number', 'value': 6 }, { 'type': 'action', 'value': '/' }],\r\n        [{ 'type': 'number', 'value': 1 }, { 'type': 'number', 'value': 2 }, { 'type': 'number', 'value': 3 }, { 'type': 'action', 'value': '*' }],\r\n        [{ 'type': 'number', 'value': 0 }, { 'type': 'number', 'value': \".\" }, { 'type': 'action', 'value': \"=\" }, { 'type': 'action', 'value': '+' }]\r\n      ],\r\n      tempInput: '',\r\n      tempOutput: ''\r\n    }\r\n  }\r\n\r\n  keypadCallback(type, value) {\r\n    if (String(this.state.input).charAt(0) == 0) {\r\n      this.setState({ input: '' }, () => {\r\n        this.calculate(type, value)\r\n      })\r\n    } else {\r\n      this.calculate(type, value)\r\n    }\r\n  }\r\n\r\n  calculate(type, value) {\r\n\r\n    this.state.tempInput = this.state.input + String(value);\r\n\r\n    if (type == 'number') {\r\n      this.state.tempOutput = eval(this.state.tempInput);\r\n      this.setState({\r\n        input: this.state.tempInput,\r\n        output: String(this.state.tempOutput).indexOf('.') >= 0 ? (this.state.tempOutput.toFixed(2)) : this.state.tempOutput\r\n      });\r\n\r\n    } else if (type == 'action' && value == 'CE') {\r\n      this.setState({\r\n        input: '0',\r\n        output: '',\r\n        tempInput: '',\r\n        tempOutput: ''\r\n      });\r\n    } else if (type == 'action' && value == '=') {\r\n      this.setState({\r\n        input: !!this.state.tempOutput ? this.state.tempOutput : 0,\r\n        output: ''\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        input: this.state.tempInput\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    var styles1 = {\r\n      border: \"2px solid black\",\r\n      margin: \"10px\",\r\n      padding: \"10px\",\r\n      display: \"inline-block\"\r\n    };\r\n\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"container\">\r\n          <div className=\"calci\" style={styles1}>\r\n            <h4>Calculator</h4>\r\n            <ResultDisplay displayInput={this.state.input} displayOutput={this.state.output}></ResultDisplay>\r\n            <Keypad keypadarray={this.state.keypadArray} calciClick={this.keypadCallback.bind(this)}></Keypad>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Keypad.css';\r\nexport default class Keypad extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        console.log(this.props)\r\n    }\r\n\r\n    onclick(type, value) {\r\n        console.log('type----', type)\r\n        console.log('value----', value)\r\n        this.props.calciClick(type, value)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <ul className=\"common-list\">\r\n                    <li className=\"common-list-item\"></li>\r\n                </ul> */}\r\n\r\n\r\n                {this.props.keypadarray.map((elem1, index1) => (\r\n                    <ul key={index1} className=\"common-list\">\r\n                        {elem1.map((elem2, index2) => (\r\n                            <li key={index2} className=\"common-list-item\">\r\n                                <button type=\"button\" className={\"btn btn-\" + (elem2.type === \"number\" ? 'success' : 'outline-primary')} onClick={() => this.onclick(elem2.type, elem2.value)}   >{elem2.value}</button>\r\n                            </li>\r\n                        ))\r\n                        }\r\n                    </ul>\r\n                ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './ResultDisplay.css'\r\nexport default class ResultDisplay extends Component {\r\n\r\n\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        console.log('react',this.props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul className=\"displayResult\">\r\n                    <li className=\"displayInput\">{this.props.displayInput}</li>\r\n                    <li className=\"displayOutput\">{this.props.displayOutput}</li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}